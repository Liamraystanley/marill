{
  "name": "Marill",
  "tagline": "Marill -- Automated site testing utility",
  "body": "![Marill -- Automated Site Testing Utility](https://i.imgur.com/HYZ3biA.png)\r\n<p align=\"center\">Marill -- Automated site testing utility.</p>\r\n\r\n[![Build Status](https://travis-ci.org/Liamraystanley/marill.svg?branch=master)](https://travis-ci.org/Liamraystanley/marill)\r\n[![GitHub Issues](https://img.shields.io/github/issues/Liamraystanley/marill.svg)](https://github.com/Liamraystanley/marill/issues)\r\n[![Project Status](https://img.shields.io/badge/status-alpha-red.svg)](https://github.com/Liamraystanley/marill/commits/master)\r\n[![Codebeat Badge](https://codebeat.co/badges/4653f785-83ec-4b21-bf0c-b519b20c89d6)](https://codebeat.co/projects/github-com-liamraystanley-marill)\r\n[![Go Report Card](https://goreportcard.com/badge/github.com/Liamraystanley/marill)](https://goreportcard.com/report/github.com/Liamraystanley/marill)\r\n\r\n## Goal\r\n\r\nOften times during server administration, migrations, and large server changes, things can and will go wrong. Servers are complex systems with many working parts, and with that comes a lot of breakage.\r\n\r\nCreating an automated site testing utility, like Marill, allows:\r\n   * Less human interaction to test sites.\r\n   * Integration and flexibility to be built into other systems.\r\n   * Clients to be at ease; you know they won't test all of their sites.\r\n   * Administrators or developers to hate you less.\r\n   * You to be witty and say \"time is money!\".\r\n\r\n## Features\r\n\r\n_Disclaimer: Marill is still in early development, and this list is subject to change drastically. (code, libraries, tools, cli-args, etc)_\r\n\r\n   * Cross platform: Marill can compile across many platforms. linux, netbsd, openbsd, freebsd, and more. (Windows too, possibly!)\r\n   * Configurable output. Only output what you need.\r\n   * Many cli flags to configure input, output, what is tested, what isn't, etc.\r\n   * Ability to test cPanel based servers, Apache, Nginx (coming soon!), and others! (any can be scanned with `--domains`)\r\n   * Flexible testing system. You can even write your own tests! Load them from a URL in JSON format, or from a directory! (see [marill/tests](https://github.com/Liamraystanley/marill/tree/master/tests))\r\n\r\n## How does it work?\r\n\r\nThe general idea is that you place Marill on the server you would like to test. Marill by default will then figure out the list of domains that server is hosting. Marill will then begin to act much like a browser, crawling each site (and all resources like images/css/javascript/etc if `--resources` is used). It will then pass each resource it fetches through the list of builtin, or external tests. Each domain is given a starting score of 10, and each test has a pre-defined weight. If the test matches, that score is applied to the main score. If the score falls below the minimum configured score, it is considered failed.\r\n\r\nHere are a few examples of tests that are useful:\r\n\r\n   * Visual PHP errors on the page. For example: `Warning: Invalid argument supplied for function() in /path/to/some/file.php`\r\n   * Invalid status codes. For example, `Forbidden`, `Internal Service Error`, `Payment Required`\r\n   * Blank pages generated by PHP (common if PHP has `display_errors` disabled)\r\n   * MySQL or PostgreSQL related errors.\r\n   * cPanel \"Sorry!\" related pages (common if the incorrect IP is configured for example).\r\n\r\nExample running from my workstation (though, this would be best suited running from the server itself):\r\n[![asciicast](https://asciinema.org/a/bhnskk1s3vwdwgl2w52deioel.png)](https://asciinema.org/a/bhnskk1s3vwdwgl2w52deioel)\r\n\r\n## Project Status:\r\n\r\n   * [See here](https://github.com/Liamraystanley/marill/projects/1) for what is being worked on/in my todo list for the first beta release.\r\n   * [See here](https://github.com/Liamraystanley/marill/projects/2) for what is being worked on/in my todo list for the first major release.\r\n   * Head over to [release.liam.sh/marill](https://release.liam.sh/marill/?sort=time&order=desc) to get some testing bundled binaries, if your'e daring and willing to help test my latest pushes.\r\n   * Head over to [Github Releases](https://github.com/Liamraystanley/marill/releases) to get more true-tested builds and versions, with change information.\r\n\r\n## Building:\r\nMarill supports building on 1.3+ (or even possibly older), however it is recommended to build on the latest go release. Note that you will not be able to use the Makefile to compile Marill if you are trying to build on go 1.4 or lower. You will need to manually compile it, due to limitations with ldflag support.\r\n\r\n```\r\n$ git clone https://github.com/Liamraystanley/marill.git\r\n$ cd marill\r\n$ make\r\n```\r\n\r\nTo run unit tests, then compile, simply run:\r\n\r\n```\r\n$ make test all\r\n```\r\n\r\n## Usage:\r\nThis is very likely to change quite a bit until we're out of beta. Please use wisely.\r\n\r\n```\r\n$ marill --help\r\nNAME:\r\n   marill - Automated website testing utility\r\n\r\nUSAGE:\r\n   marill [global options] command [command options] [arguments...]\r\n   \r\nVERSION:\r\n   git revision XXXXXX\r\n   \r\nAUTHOR(S):\r\n   Liam Stanley <user@domain.com> \r\n   \r\nGLOBAL OPTIONS:\r\n   -d, --debug              Print debugging information to stdout\r\n   -q, --quiet              Do not print regular stdout messages\r\n   --no-color               Do not print with color\r\n   --no-banner              Do not print the colorful banner\r\n   --exit-on-fail           Send exit code 1 if any domains fail tests\r\n   --log-file logfile       Log debugging information to logfile\r\n   --no-updates             Don't check to see if there are updates\r\n   --urls                   Print the list of urls as if they were going to be scanned\r\n   --tests                  Print the list of tests that are loaded and would be used\r\n   --tests-extended         Same as --tests, with extra information\r\n   --threads n              Use n threads to fetch data (0 defaults to server cores/2) (default: 0)\r\n   --delay DURATION         Delay DURATION before each resource is crawled (e.g. 5s, 1m, 100ms) (default: 0s)\r\n   --domains DOMAIN:IP ...  Manually specify list of domains to scan in form: DOMAIN:IP ..., or DOMAIN:IP:PORT\r\n   --min-score value        Minimium score for domain (default: 8)\r\n   -r, --resources          Check all resources/assets (css/js/images) for each page\r\n   --ignore-success         Only print results if they are considered failed\r\n   --tmpl value             Golang text/template string template for use with formatting scan output\r\n   --ignore-http            Ignore http-based URLs during domain search\r\n   --ignore-https           Ignore https-based URLs during domain search\r\n   --ignore-remote          Ignore all resources that resolve to a remote IP (use with --resources)\r\n   --domain-ignore GLOB     Ignore URLS during domain search that match GLOB, pipe separated list\r\n   --domain-match GLOB      Allow URLS during domain search that match GLOB, pipe separated list\r\n   --test-ignore GLOB       Ignore tests that match GLOB, pipe separated list\r\n   --test-match GLOB        Allow tests that match GLOB, pipe separated list\r\n   --tests-url URL          Import tests from a specified URL\r\n   --tests-path PATH        Import tests from a specified file-system PATH\r\n   --ignore-std-tests       Ignores all built-in tests (useful with --tests-url)\r\n   --help, -h               show help\r\n   --version, -v            print the version\r\n\r\n   \r\nCOPYRIGHT:\r\n   (c) 2016 Liam Stanley (see https://git.io/vPvUp)\r\n```\r\n\r\n## Testing\r\n\r\nSo, you want to help out, test, see how things work, and find possible bugs? Follow the below steps and you will be right on your way.\r\n\r\n### cPanel server steps:\r\n\r\nHead to [this page](https://release.liam.sh/marill/?sort=time&order=desc) and download the top item in the list. For example (replacing **YOUR-VERSION** with the latest download link):\r\n```bash\r\n$ cd /root/tmp && wget https://release.liam.sh/marill/marill_YOUR-VERSION.tar.gz\r\n```\r\n\r\nThe archive only has a single binary in it. Extract it so we can get to work:\r\n```bash\r\n$ tar -xzvf marill_linux_amd64_YOUR-VERSION.tar.gz\r\n```\r\n\r\nYou should now see a file named **marill** in the same directory. Feel free to look over the current flags and arguments:\r\n```bash\r\n$ /root/tmp/marill --help\r\n```\r\n\r\nThe main arguments that may be useful are:\r\n   * `-r` or `--resources`: This will fetch all of the resources (css/javascript/images, etc)\r\n   * `-d` or `--debug`: This will enable debugging. It doesn't provide a whole lot more information, but can help if something isn't working.\r\n   * `--delay`: Utilize this if the load caused by the crawling is too high. E.g. `--delay 10s`.\r\n   * `--threads`: This is the amount of parallel scans will run at a single time. By default it will be 1/2 the amount of cores on the server.\r\n   * `--domain-ignore` and `--domain-match`: utilize these to skip or only scan certain domains during the crawl. E.g. `--domains-ignore \"*domain.com|someotherdomain.com\"`\r\n\r\nSo, for example, to start off with:\r\n```bash\r\n$ /root/tmp/marill -r\r\n```\r\n\r\n**Things to note/Troubleshooting:**\r\n   * Please remove `/root/tmp/marill` once you are done. This utility is still in alpha stages, and as such, there is no update check functionality. Leaving in place may cause someone in the future to utilize an outdated version of the software.\r\n   * If there are any problems or bugs, **PLEASE LET ME KNOW!** You can submit bugs if you have a Github account [here](https://github.com/Liamraystanley/marill/issues/new) or [here if you do not](https://gitreports.com/issue/Liamraystanley/marill)\r\n\r\n## License:\r\n\r\n    LICENSE: The MIT License (MIT)\r\n    Copyright (c) 2016 Liam Stanley <me@liamstanley.io>\r\n\r\n    Permission is hereby granted, free of charge, to any person obtaining a copy\r\n    of this software and associated documentation files (the \"Software\"), to deal\r\n    in the Software without restriction, including without limitation the rights\r\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n    copies of the Software, and to permit persons to whom the Software is\r\n    furnished to do so, subject to the following conditions:\r\n    \r\n    The above copyright notice and this permission notice shall be included in\r\n    all copies or substantial portions of the Software.\r\n    \r\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n    SOFTWARE.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}